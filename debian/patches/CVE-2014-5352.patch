From 82dc33da50338ac84c7b4102dc6513d897d0506a Mon Sep 17 00:00:00 2001
From: Greg Hudson <ghudson@mit.edu>
Date: Wed, 5 Nov 2014 11:58:04 -0500
Subject: [PATCH] Fix gss_process_context_token() [CVE-2014-5352]

[MITKRB5-SA-2015-001] The krb5 gss_process_context_token() should not
actually delete the context; that leaves the caller with a dangling
pointer and no way to know that it is invalid.  Instead, mark the
context as terminated, and check for terminated contexts in the GSS
functions which expect established contexts.  Also add checks in
export_sec_context and pseudo_random, and adjust t_prf.c for the
pseudo_random check.

ticket: 8055 (new)
target_version: 1.13.1
tags: pullup
---
 src/lib/gssapi/krb5/context_time.c          |  2 +-
 src/lib/gssapi/krb5/export_sec_context.c    |  5 +++++
 src/lib/gssapi/krb5/gssapiP_krb5.h          |  1 +
 src/lib/gssapi/krb5/gssapi_krb5.c           |  2 +-
 src/lib/gssapi/krb5/inq_context.c           |  2 +-
 src/lib/gssapi/krb5/k5seal.c                |  2 +-
 src/lib/gssapi/krb5/k5sealiov.c             |  2 +-
 src/lib/gssapi/krb5/k5unseal.c              |  2 +-
 src/lib/gssapi/krb5/k5unsealiov.c           |  2 +-
 src/lib/gssapi/krb5/lucid_context.c         |  5 +++++
 src/lib/gssapi/krb5/prf.c                   |  4 ++++
 src/lib/gssapi/krb5/process_context_token.c | 17 ++++++++++++-----
 src/lib/gssapi/krb5/wrap_size_limit.c       |  2 +-
 src/tests/gssapi/t_prf.c                    |  1 +
 14 files changed, 36 insertions(+), 13 deletions(-)

Index: krb5-1.10+dfsg~beta1/src/lib/gssapi/krb5/context_time.c
===================================================================
--- krb5-1.10+dfsg~beta1.orig/src/lib/gssapi/krb5/context_time.c	2015-02-06 15:32:48.187717591 -0500
+++ krb5-1.10+dfsg~beta1/src/lib/gssapi/krb5/context_time.c	2015-02-06 15:32:48.183717559 -0500
@@ -40,7 +40,7 @@
 
     ctx = (krb5_gss_ctx_id_rec *) context_handle;
 
-    if (! ctx->established) {
+    if (ctx->terminated || !ctx->established) {
         *minor_status = KG_CTX_INCOMPLETE;
         return(GSS_S_NO_CONTEXT);
     }
Index: krb5-1.10+dfsg~beta1/src/lib/gssapi/krb5/export_sec_context.c
===================================================================
--- krb5-1.10+dfsg~beta1.orig/src/lib/gssapi/krb5/export_sec_context.c	2015-02-06 15:32:48.187717591 -0500
+++ krb5-1.10+dfsg~beta1/src/lib/gssapi/krb5/export_sec_context.c	2015-02-06 15:32:48.183717559 -0500
@@ -45,6 +45,11 @@
     *minor_status = 0;
 
     ctx = (krb5_gss_ctx_id_t) *context_handle;
+    if (ctx->terminated) {
+        *minor_status = KG_CTX_INCOMPLETE;
+        return (GSS_S_NO_CONTEXT);
+    }
+
     context = ctx->k5_context;
     kret = krb5_gss_ser_init(context);
     if (kret)
Index: krb5-1.10+dfsg~beta1/src/lib/gssapi/krb5/gssapiP_krb5.h
===================================================================
--- krb5-1.10+dfsg~beta1.orig/src/lib/gssapi/krb5/gssapiP_krb5.h	2015-02-06 15:32:48.187717591 -0500
+++ krb5-1.10+dfsg~beta1/src/lib/gssapi/krb5/gssapiP_krb5.h	2015-02-06 15:32:48.183717559 -0500
@@ -202,6 +202,7 @@
     unsigned int big_endian : 1;
     unsigned int have_acceptor_subkey : 1;
     unsigned int seed_init : 1;  /* XXX tested but never actually set */
+    unsigned int terminated : 1;
     OM_uint32 gss_flags;
     unsigned char seed[16];
     krb5_gss_name_t here;
Index: krb5-1.10+dfsg~beta1/src/lib/gssapi/krb5/gssapi_krb5.c
===================================================================
--- krb5-1.10+dfsg~beta1.orig/src/lib/gssapi/krb5/gssapi_krb5.c	2015-02-06 15:32:48.187717591 -0500
+++ krb5-1.10+dfsg~beta1/src/lib/gssapi/krb5/gssapi_krb5.c	2015-02-06 15:32:48.183717559 -0500
@@ -369,7 +369,7 @@
 
     ctx = (krb5_gss_ctx_id_rec *) context_handle;
 
-    if (!ctx->established)
+    if (ctx->terminated || !ctx->established)
         return GSS_S_NO_CONTEXT;
 
     for (i = 0; i < sizeof(krb5_gss_inquire_sec_context_by_oid_ops)/
Index: krb5-1.10+dfsg~beta1/src/lib/gssapi/krb5/inq_context.c
===================================================================
--- krb5-1.10+dfsg~beta1.orig/src/lib/gssapi/krb5/inq_context.c	2015-02-06 15:32:48.187717591 -0500
+++ krb5-1.10+dfsg~beta1/src/lib/gssapi/krb5/inq_context.c	2015-02-06 15:32:48.183717559 -0500
@@ -105,7 +105,7 @@
 
     ctx = (krb5_gss_ctx_id_rec *) context_handle;
 
-    if (! ctx->established) {
+    if (ctx->terminated || !ctx->established) {
         *minor_status = KG_CTX_INCOMPLETE;
         return(GSS_S_NO_CONTEXT);
     }
Index: krb5-1.10+dfsg~beta1/src/lib/gssapi/krb5/k5seal.c
===================================================================
--- krb5-1.10+dfsg~beta1.orig/src/lib/gssapi/krb5/k5seal.c	2015-02-06 15:32:48.187717591 -0500
+++ krb5-1.10+dfsg~beta1/src/lib/gssapi/krb5/k5seal.c	2015-02-06 15:32:48.183717559 -0500
@@ -347,7 +347,7 @@
 
     ctx = (krb5_gss_ctx_id_rec *) context_handle;
 
-    if (! ctx->established) {
+    if (ctx->terminated || !ctx->established) {
         *minor_status = KG_CTX_INCOMPLETE;
         return(GSS_S_NO_CONTEXT);
     }
Index: krb5-1.10+dfsg~beta1/src/lib/gssapi/krb5/k5sealiov.c
===================================================================
--- krb5-1.10+dfsg~beta1.orig/src/lib/gssapi/krb5/k5sealiov.c	2015-02-06 15:32:48.187717591 -0500
+++ krb5-1.10+dfsg~beta1/src/lib/gssapi/krb5/k5sealiov.c	2015-02-06 15:32:48.183717559 -0500
@@ -285,7 +285,7 @@
     }
 
     ctx = (krb5_gss_ctx_id_rec *)context_handle;
-    if (!ctx->established) {
+    if (ctx->terminated || !ctx->established) {
         *minor_status = KG_CTX_INCOMPLETE;
         return GSS_S_NO_CONTEXT;
     }
Index: krb5-1.10+dfsg~beta1/src/lib/gssapi/krb5/k5unseal.c
===================================================================
--- krb5-1.10+dfsg~beta1.orig/src/lib/gssapi/krb5/k5unseal.c	2015-02-06 15:32:48.187717591 -0500
+++ krb5-1.10+dfsg~beta1/src/lib/gssapi/krb5/k5unseal.c	2015-02-06 15:32:48.183717559 -0500
@@ -512,7 +512,7 @@
 
     ctx = (krb5_gss_ctx_id_rec *) context_handle;
 
-    if (! ctx->established) {
+    if (ctx->terminated || !ctx->established) {
         *minor_status = KG_CTX_INCOMPLETE;
         return(GSS_S_NO_CONTEXT);
     }
Index: krb5-1.10+dfsg~beta1/src/lib/gssapi/krb5/k5unsealiov.c
===================================================================
--- krb5-1.10+dfsg~beta1.orig/src/lib/gssapi/krb5/k5unsealiov.c	2015-02-06 15:32:48.187717591 -0500
+++ krb5-1.10+dfsg~beta1/src/lib/gssapi/krb5/k5unsealiov.c	2015-02-06 15:32:48.183717559 -0500
@@ -635,7 +635,7 @@
     OM_uint32 code;
 
     ctx = (krb5_gss_ctx_id_rec *)context_handle;
-    if (!ctx->established) {
+    if (ctx->terminated || !ctx->established) {
         *minor_status = KG_CTX_INCOMPLETE;
         return GSS_S_NO_CONTEXT;
     }
Index: krb5-1.10+dfsg~beta1/src/lib/gssapi/krb5/lucid_context.c
===================================================================
--- krb5-1.10+dfsg~beta1.orig/src/lib/gssapi/krb5/lucid_context.c	2015-02-06 15:32:48.187717591 -0500
+++ krb5-1.10+dfsg~beta1/src/lib/gssapi/krb5/lucid_context.c	2015-02-06 15:32:48.183717559 -0500
@@ -75,6 +75,11 @@
     *minor_status = 0;
     *data_set = GSS_C_NO_BUFFER_SET;
 
+    if (ctx->terminated || !ctx->established) {
+        *minor_status = KG_CTX_INCOMPLETE;
+        return GSS_S_NO_CONTEXT;
+    }
+
     retval = generic_gss_oid_decompose(minor_status,
                                        GSS_KRB5_EXPORT_LUCID_SEC_CONTEXT_OID,
                                        GSS_KRB5_EXPORT_LUCID_SEC_CONTEXT_OID_LENGTH,
Index: krb5-1.10+dfsg~beta1/src/lib/gssapi/krb5/prf.c
===================================================================
--- krb5-1.10+dfsg~beta1.orig/src/lib/gssapi/krb5/prf.c	2015-02-06 15:32:48.187717591 -0500
+++ krb5-1.10+dfsg~beta1/src/lib/gssapi/krb5/prf.c	2015-02-06 15:32:48.183717559 -0500
@@ -60,6 +60,10 @@
     ns.data = NULL;
 
     ctx = (krb5_gss_ctx_id_t)context;
+    if (ctx->terminated || !ctx->established) {
+        *minor_status = KG_CTX_INCOMPLETE;
+        return GSS_S_NO_CONTEXT;
+    }
 
     switch (prf_key) {
     case GSS_C_PRF_KEY_FULL:
Index: krb5-1.10+dfsg~beta1/src/lib/gssapi/krb5/process_context_token.c
===================================================================
--- krb5-1.10+dfsg~beta1.orig/src/lib/gssapi/krb5/process_context_token.c	2015-02-06 15:32:48.187717591 -0500
+++ krb5-1.10+dfsg~beta1/src/lib/gssapi/krb5/process_context_token.c	2015-02-06 15:32:48.187717591 -0500
@@ -39,11 +39,18 @@
 
     ctx = (krb5_gss_ctx_id_t) context_handle;
 
-    if (! ctx->established) {
+    if (ctx->terminated || !ctx->established) {
         *minor_status = KG_CTX_INCOMPLETE;
         return(GSS_S_NO_CONTEXT);
     }
 
+    /* We only support context deletion tokens for now, and RFC 4121 does not
+     * define a context deletion token. */
+    if (ctx->proto) {
+        *minor_status = 0;
+        return(GSS_S_DEFECTIVE_TOKEN);
+    }
+
     /* "unseal" the token */
 
     if (GSS_ERROR(majerr = kg_unseal(minor_status, context_handle,
@@ -52,8 +59,8 @@
                                      KG_TOK_DEL_CTX)))
         return(majerr);
 
-    /* that's it.  delete the context */
-
-    return(krb5_gss_delete_sec_context(minor_status, &context_handle,
-                                       GSS_C_NO_BUFFER));
+    /* Mark the context as terminated, but do not delete it (as that would
+     * leave the caller with a dangling context handle). */
+    ctx->terminated = 1;
+    return(GSS_S_COMPLETE);
 }
Index: krb5-1.10+dfsg~beta1/src/lib/gssapi/krb5/wrap_size_limit.c
===================================================================
--- krb5-1.10+dfsg~beta1.orig/src/lib/gssapi/krb5/wrap_size_limit.c	2015-02-06 15:32:48.187717591 -0500
+++ krb5-1.10+dfsg~beta1/src/lib/gssapi/krb5/wrap_size_limit.c	2015-02-06 15:32:48.187717591 -0500
@@ -95,7 +95,7 @@
     }
 
     ctx = (krb5_gss_ctx_id_rec *) context_handle;
-    if (! ctx->established) {
+    if (ctx->terminated || !ctx->established) {
         *minor_status = KG_CTX_INCOMPLETE;
         return(GSS_S_NO_CONTEXT);
     }
